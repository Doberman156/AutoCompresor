#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para crear releases autom√°ticamente
Automatizaci√≥n de Compresi√≥n de Archivos

Uso:
    python scripts/create_release.py [patch|minor|major]
    
Ejemplos:
    python scripts/create_release.py patch   # 1.0.0 ‚Üí 1.0.1
    python scripts/create_release.py minor   # 1.0.1 ‚Üí 1.1.0
    python scripts/create_release.py major   # 1.1.0 ‚Üí 2.0.0
"""

import json
import subprocess
import sys
import os
from datetime import datetime
from pathlib import Path

class ReleaseManager:
    """Gestor de releases autom√°ticos"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.version_file = self.project_root / 'version.json'
        self.config_file = self.project_root / 'config.json'
        
    def get_current_version(self):
        """Obtiene la versi√≥n actual del archivo version.json"""
        try:
            if self.version_file.exists():
                with open(self.version_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                return data.get('version', '1.0.0')
            else:
                return '1.0.0'
        except Exception as e:
            print(f"‚ö†Ô∏è Error al leer version.json: {e}")
            return '1.0.0'
    
    def increment_version(self, version, increment_type='patch'):
        """Incrementa la versi√≥n seg√∫n el tipo"""
        try:
            parts = version.split('.')
            if len(parts) != 3:
                raise ValueError("Formato de versi√≥n inv√°lido")
                
            major, minor, patch = map(int, parts)
            
            if increment_type == 'major':
                major += 1
                minor = 0
                patch = 0
            elif increment_type == 'minor':
                minor += 1
                patch = 0
            else:  # patch
                patch += 1
            
            return f"{major}.{minor}.{patch}"
        except Exception as e:
            print(f"‚ùå Error al incrementar versi√≥n: {e}")
            return None
    
    def update_version_file(self, new_version):
        """Actualiza el archivo version.json"""
        try:
            version_data = {
                "version": new_version,
                "build_date": datetime.now().strftime("%Y-%m-%d"),
                "build_number": int(datetime.now().timestamp()),
                "release_notes": f"Versi√≥n {new_version} con mejoras y correcciones",
                "changelog": [
                    "‚ú® Mejoras en la interfaz de usuario",
                    "üêõ Correcciones de errores menores",
                    "‚ö° Optimizaciones de rendimiento",
                    "üîí Mejoras de seguridad"
                ]
            }
            
            with open(self.version_file, 'w', encoding='utf-8') as f:
                json.dump(version_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Archivo version.json actualizado a v{new_version}")
            return True
        except Exception as e:
            print(f"‚ùå Error al actualizar version.json: {e}")
            return False
    
    def run_command(self, command, description=""):
        """Ejecuta un comando y maneja errores"""
        try:
            if description:
                print(f"üîÑ {description}...")
            
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                cwd=self.project_root
            )
            
            if result.returncode != 0:
                print(f"‚ùå Error en comando: {command}")
                print(f"Error: {result.stderr}")
                return False
            
            if result.stdout.strip():
                print(f"üìù {result.stdout.strip()}")
            
            return True
        except Exception as e:
            print(f"‚ùå Error ejecutando comando '{command}': {e}")
            return False
    
    def build_application(self):
        """Compila la aplicaci√≥n"""
        print("üî® Compilando aplicaci√≥n...")
        
        # Verificar que existe build.py
        build_script = self.project_root / 'build.py'
        if not build_script.exists():
            print("‚ùå No se encontr√≥ build.py")
            return False
        
        # Ejecutar build
        return self.run_command(
            f'python "{build_script}"',
            "Ejecutando script de compilaci√≥n"
        )
    
    def check_git_status(self):
        """Verifica el estado de git"""
        print("üìã Verificando estado de git...")
        
        # Verificar si hay cambios sin commit
        result = subprocess.run(
            ['git', 'status', '--porcelain'], 
            capture_output=True, 
            text=True,
            cwd=self.project_root
        )
        
        if result.stdout.strip():
            print("‚ö†Ô∏è Hay cambios sin commit:")
            print(result.stdout)
            print("‚úÖ Continuando autom√°ticamente con commit...")
        
        return True
    
    def git_operations(self, new_version):
        """Realiza operaciones de git"""
        print("üì§ Realizando operaciones de git...")
        
        # Add todos los archivos
        if not self.run_command('git add .', "Agregando archivos"):
            return False
        
        # Commit
        commit_message = f"Release v{new_version}"
        if not self.run_command(f'git commit -m "{commit_message}"', "Creando commit"):
            return False
        
        # Push
        if not self.run_command('git push origin main', "Subiendo cambios"):
            return False
        
        # Crear tag
        tag_name = f"v{new_version}"
        if not self.run_command(f'git tag {tag_name}', f"Creando tag {tag_name}"):
            return False
        
        # Push tag
        if not self.run_command(f'git push origin {tag_name}', f"Subiendo tag {tag_name}"):
            return False
        
        return True
    
    def create_release(self, version_type='patch'):
        """Crea un nuevo release completo"""
        print("üöÄ Iniciando proceso de release...")
        print("=" * 50)
        
        # Verificar git
        if not self.check_git_status():
            return False
        
        # Obtener versiones
        current_version = self.get_current_version()
        new_version = self.increment_version(current_version, version_type)
        
        if not new_version:
            return False
        
        print(f"üìà Versi√≥n actual: {current_version}")
        print(f"üìà Nueva versi√≥n: {new_version}")
        print(f"üìà Tipo de release: {version_type}")
        print()
        
        # Confirmar autom√°ticamente
        print(f"‚úÖ Creando release v{new_version} autom√°ticamente...")
        
        print()
        
        # Actualizar version.json
        if not self.update_version_file(new_version):
            return False
        
        # Compilar aplicaci√≥n
        if not self.build_application():
            return False
        
        # Operaciones de git
        if not self.git_operations(new_version):
            return False
        
        # √âxito
        print()
        print("=" * 50)
        print(f"üéâ Release v{new_version} creado exitosamente!")
        print(f"üîó GitHub Actions se ejecutar√° autom√°ticamente")
        print(f"üì• URL del release: https://github.com/TU-USUARIO/automatizacion-compresion/releases/tag/v{new_version}")
        print()
        print("üìã Pr√≥ximos pasos:")
        print("1. Ve a GitHub y verifica que GitHub Actions se est√© ejecutando")
        print("2. Una vez completado, el release estar√° disponible")
        print("3. Los usuarios recibir√°n notificaciones de actualizaci√≥n")
        
        return True

def show_help():
    """Muestra ayuda del script"""
    help_text = """
üöÄ Script de Release Autom√°tico

Uso:
    python scripts/create_release.py [tipo]

Tipos de release:
    patch   - Incrementa versi√≥n patch (1.0.0 ‚Üí 1.0.1)
    minor   - Incrementa versi√≥n minor (1.0.0 ‚Üí 1.1.0)
    major   - Incrementa versi√≥n major (1.0.0 ‚Üí 2.0.0)

Ejemplos:
    python scripts/create_release.py patch
    python scripts/create_release.py minor
    python scripts/create_release.py major

El script realizar√°:
    ‚úÖ Incrementar versi√≥n en version.json
    ‚úÖ Compilar la aplicaci√≥n
    ‚úÖ Crear commit y tag en git
    ‚úÖ Subir cambios a GitHub
    ‚úÖ Activar GitHub Actions para crear release
"""
    print(help_text)

def main():
    """Funci√≥n principal"""
    # Verificar argumentos
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        show_help()
        return
    
    # Obtener tipo de versi√≥n
    version_type = 'patch'
    if len(sys.argv) > 1:
        version_type = sys.argv[1].lower()
        if version_type not in ['patch', 'minor', 'major']:
            print(f"‚ùå Tipo de versi√≥n inv√°lido: {version_type}")
            print("Tipos v√°lidos: patch, minor, major")
            return
    
    # Crear release
    manager = ReleaseManager()
    success = manager.create_release(version_type)
    
    if success:
        sys.exit(0)
    else:
        print("‚ùå Error al crear release")
        sys.exit(1)

if __name__ == '__main__':
    main()